#!/usr/bin/env python

import argparse
from datetime import date

if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='dataproducts')
    parser.add_argument("-v", "--version", help="Dataproducts version"
                        , action='store_true', dest='version', default=False)
    subparsers = parser.add_subparsers(dest='cmd', help='sub-commands')

    parser_ecg = subparsers.add_parser('ecg_learning',
                                       help='Pulse of nation learning')
    parser_ecg.add_argument("--data_store_location", type=str,
                            help="The path to local data folder")
    parser_ecg.add_argument("--bootstrap", action='store_true',
                            help="Run for 7 days", default=False)

    parser_lpm = subparsers.add_parser('landing_page',
                                       help='Landing Page Metrics')
    parser_lpm.add_argument("--data_store_location", type=str,
                            help="The path to local data folder")
    parser_lpm.add_argument("--org_search", type=str,
                            help="host address for Org API")

    parser_cc = subparsers.add_parser('content_consumption',
                                      help='Content consumption report')
    parser_cc.add_argument("--data_store_location", type=str,
                           help="the path to local data folder")
    parser_cc.add_argument("--org_search", type=str,
                           help="host address for Org API")
    parser_cc.add_argument("--druid_hostname", type=str,
                           help="Host address for Druid")
    parser_cc.add_argument("--druid_rollup_hostname", type=str,
                           help="Host address for Druid Rollup")
    parser_cc.add_argument("--content_search", type=str,
                           help="Host address for Content Search API")
    parser_cc.add_argument("--execution_date", type=str,
                           default=date.today().strftime("%d/%m/%Y"),
                           help="DD/MM/YYYY, optional argument for backfill jobs")

    parser_etb = subparsers.add_parser('etb_metrics',
                                       help='ETB Creation Metrics & Dialcode Exception Report')
    parser_etb.add_argument("--data_store_location", type=str,
                            help="the path to local data folder")
    parser_etb.add_argument("--druid_hostname", type=str,
                            help="Host address for Druid")
    parser_etb.add_argument("--org_search", type=str,
                            help="host address for Org API")
    parser_etb.add_argument("--content_search", type=str,
                            help="Host address for Content Search API")
    parser_etb.add_argument("--content_hierarchy", type=str,
                            help="Host address for Content Hierarchy API")
    parser_etb.add_argument("--execution_date", type=str,
                            default=date.today().strftime("%d/%m/%Y"),
                            help="DD/MM/YYYY, optional argument for backfill jobs")

    parser_cmo = subparsers.add_parser('cmo_dashboard',
                                       help='CMO Dashboard')
    parser_cmo.add_argument("--data_store_location", type=str,
                            help="the path to local data folder")
    parser_cmo.add_argument("--org_search", type=str,
                            help="host address for Org API")
    parser_cmo.add_argument("--execution_date", type=str,
                            default=date.today().strftime("%d/%m/%Y"),
                            help="DD/MM/YYYY, optional argument for backfill jobs")

    args = parser.parse_args()

    if args.cmd == "ecg_learning":
        from dataproducts.services.consumption.ecg_learning import ECGLearning

        ecg = ECGLearning(args.data_store_location, args.bootstrap)
        ecg.init()

    elif args.cmd == "landing_page":
        from dataproducts.services.consumption.landing_page import LandingPageMetrics

        lpm = LandingPageMetrics(args.data_store_location, args.org_search)
        lpm.init()

    elif args.cmd == "content_consumption":
        from dataproducts.services.consumption.content_consumption import ContentConsumption

        cont_consumption = ContentConsumption(args.data_store_location, args.org_search,
                                              args.druid_hostname, args.druid_rollup_hostname,
                                              args.content_search, args.execution_date)
        cont_consumption.init()

    elif args.cmd == "etb_metrics":
        from dataproducts.services.etb.etb_metrics import ETBMetrics

        etb_metrics = ETBMetrics(args.data_store_location,
                                 args.druid_hostname, args.content_search,
                                 args.content_hierarchy, args.execution_date,
                                 args.org_search)
        etb_metrics.init()

    elif args.cmd == "cmo_dashboard":
        from dataproducts.services.consumption.cmo_dashboard import CMODashboard

        cmo_dashboard = CMODashboard(args.data_store_location,
                                     args.execution_date, args.org_search)
        cmo_dashboard.init()

    if args.version:
        print("version - 1.0.0")
